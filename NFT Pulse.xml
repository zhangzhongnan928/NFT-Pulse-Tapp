<?xml version="1.0" encoding="UTF-8"?>
<ts:token xmlns:ts="http://tokenscript.org/2024/01/tokenscript"
          xmlns:ethereum="urn:ethereum:constantinople"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://tokenscript.org/schemas/2024-01/tokenscript.xsd"
          name="NFT Pulse Token">
    
    <ts:label>
        <ts:string xml:lang="en">NFT Pulse Token</ts:string>
    </ts:label>
    
    <ts:contract interface="erc721" name="NFTPulseToken">
        <ts:address network="8453">0x923b382F3205c26EFe706C53D69F71f0817AA954</ts:address>
    </ts:contract>
    
    <ts:origins>
        <ethereum:event contract="NFTPulseToken" type="Transfer" filter="to=${ownerAddress}">
            <ts:data>
                <ts:uint256 ref="tokenId"/>
            </ts:data>
        </ethereum:event>
    </ts:origins>
    
    <ts:selection filter="(tokenId=${tokenId})">
        <ts:label>
            <ts:string xml:lang="en">NFT Pulse Token #${tokenId}</ts:string>
        </ts:label>
    </ts:selection>
    
    <ts:cards>
        <ts:card type="action" name="MoonVote">
            <ts:label>
                <ts:string xml:lang="en">🚀 Moon Vote</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                    .container { font-family: 'Courier New', monospace; max-width: 400px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: #00ff00; border-radius: 10px; }
                    .nft-image { max-width: 100%; height: auto; border-radius: 10px; border: 2px solid #00ff00; }
                    .info { margin-top: 20px; }
                    .action-button { background-color: #4CAF50; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 5px; transition: all 0.3s; }
                    .action-button:hover { transform: translateY(-3px); box-shadow: 0 4px 8px rgba(0,255,0,0.3); }
                    .moon-button { background-color: #FFD700; }
                    .rekt-button { background-color: #FF4500; }
                </style>
                <script type="text/javascript">
                    class Token {
                        constructor(tokenInstance) {
                            this.name = 'NFT Pulse Token #' + tokenInstance.tokenId;
                            this.image = 'https://api.nftpulse.com/token-image/' + tokenInstance.tokenId;
                            this.description = 'A unique NFT Pulse Token ready for the moon!';
                            this.moonVotes = 0;
                            this.rektVotes = 0;
                        }
                        
                        async loadVotes() {
                            // In a real implementation, this would fetch data from a blockchain or API
                            this.moonVotes = Math.floor(Math.random() * 1000);
                            this.rektVotes = Math.floor(Math.random() * 100);
                        }
                        
                        async moonVote() {
                            // In a real implementation, this would interact with a smart contract
                            this.moonVotes++;
                            document.getElementById('moonCount').textContent = this.moonVotes;
                        }
                        
                        async rektVote() {
                            // In a real implementation, this would interact with a smart contract
                            this.rektVotes++;
                            document.getElementById('rektCount').textContent = this.rektVotes;
                        }
                    }
                    
                    window.onload = async function() {
                        const token = new Token(tokenscript.tokens.currentInstance);
                        await token.loadVotes();
                        
                        document.getElementById('nftName').textContent = token.name;
                        document.getElementById('nftImage').src = token.image;
                        document.getElementById('nftDescription').textContent = token.description;
                        document.getElementById('moonCount').textContent = token.moonVotes;
                        document.getElementById('rektCount').textContent = token.rektVotes;
                        
                        document.getElementById('moonButton').onclick = () => token.moonVote();
                        document.getElementById('rektButton').onclick = () => token.rektVote();
                    };
                </script>
                <div class="container">
                    <img id="nftImage" class="nft-image" src="" alt="NFT Image" />
                    <div class="info">
                        <h2 id="nftName"></h2>
                        <p id="nftDescription"></p>
                        <p>🚀 Moon Votes: <span id="moonCount">0</span></p>
                        <p>💥 Rekt Votes: <span id="rektCount">0</span></p>
                        <button id="moonButton" class="action-button moon-button">🚀 To The Moon!</button>
                        <button id="rektButton" class="action-button rekt-button">💥 Get Rekt!</button>
                    </div>
                </div>
            </ts:view>
        </ts:card>

        <ts:card type="action" name="DiamondHands">
            <ts:label>
                <ts:string xml:lang="en">💎 Diamond Hands</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                    .container { font-family: 'Courier New', monospace; max-width: 400px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: #00ff00; border-radius: 10px; }
                    .leaderboard { list-style-type: none; padding: 0; }
                    .leaderboard-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #00ff00; }
                    .leaderboard-item:last-child { border-bottom: none; }
                </style>
                <script type="text/javascript">
                    async function loadLeaderboard() {
                        // In a real implementation, this would fetch data from a blockchain or API
                        const mockLeaderboard = [
                            { name: 'CryptoPunk #1337', votes: 9999 },
                            { name: 'Bored Ape #42', votes: 8888 },
                            { name: 'Doodle #007', votes: 7777 },
                            { name: 'Azuki #888', votes: 6666 },
                            { name: 'Cool Cat #1', votes: 5555 }
                        ];
                        
                        const leaderboardElement = document.getElementById('leaderboard');
                        mockLeaderboard.forEach((item, index) => {
                            const listItem = document.createElement('li');
                            listItem.className = 'leaderboard-item';
                            listItem.innerHTML = `
                                <span>#${index + 1} ${item.name}</span>
                                <span>${item.votes} 🚀</span>
                            `;
                            leaderboardElement.appendChild(listItem);
                        });
                    }
                    
                    window.onload = loadLeaderboard;
                </script>
                <div class="container">
                    <h2>💎 Diamond Hands Leaderboard 💎</h2>
                    <ul id="leaderboard" class="leaderboard"></ul>
                </div>
            </ts:view>
        </ts:card>

        <ts:card type="action" name="MemeForge">
            <ts:label>
                <ts:string xml:lang="en">🔗 Meme Forge</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                    .container { font-family: 'Courier New', monospace; max-width: 400px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: #00ff00; border-radius: 10px; }
                    .tlink-list { list-style-type: none; padding: 0; }
                    .tlink-item { margin-bottom: 10px; }
                    .tlink { color: #FFD700; text-decoration: none; }
                    .tlink:hover { text-decoration: underline; }
                    .generate-button { background-color: #4CAF50; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 5px; transition: all 0.3s; }
                    .generate-button:hover { transform: translateY(-3px); box-shadow: 0 4px 8px rgba(0,255,0,0.3); }
                </style>
                <script type="text/javascript">
                    function generateTlink() {
                        const tokenId = Math.floor(Math.random() * 10000);
                        const tlink = `https://viewer.tokenscript.org/?chain=1&contract=0x1234567890123456789012345678901234567890&tokenId=${tokenId}`;
                        
                        const tlinkList = document.getElementById('tlinkList');
                        const listItem = document.createElement('li');
                        listItem.className = 'tlink-item';
                        listItem.innerHTML = `<a href="${tlink}" class="tlink" target="_blank">Tlink for Token #${tokenId}</a>`;
                        tlinkList.appendChild(listItem);
                    }
                </script>
                <div class="container">
                    <h2>🔗 Meme Forge: Craft Your Tlinks</h2>
                    <button onclick="generateTlink()" class="generate-button">🛠️ Forge New Tlink</button>
                    <ul id="tlinkList" class="tlink-list"></ul>
                </div>
            </ts:view>
        </ts:card>

        <ts:card type="action" name="Hodlverse">
            <ts:label>
                <ts:string xml:lang="en">🌌 Hodlverse</ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                    .container { font-family: 'Courier New', monospace; max-width: 400px; margin: 0 auto; padding: 20px; background-color: #1a1a1a; color: #00ff00; border-radius: 10px; }
                    .nft-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; }
                    .nft-item { background-color: #2a2a2a; padding: 10px; border-radius: 5px; text-align: center; }
                    .nft-image { width: 100%; height: auto; border-radius: 5px; }
                </style>
                <script type="text/javascript">
                    async function loadUserNFTs() {
                        // In a real implementation, this would fetch the user's NFTs from a blockchain or API
                        const mockNFTs = [
                            { id: 1, name: 'CryptoKitty #42', image: 'https://placeholder.com/100x100' },
                            { id: 2, name: 'Moonbird #007', image: 'https://placeholder.com/100x100' },
                            { id: 3, name: 'Pudgy Penguin #1', image: 'https://placeholder.com/100x100' },
                            { id: 4, name: 'VeeFriend #888', image: 'https://placeholder.com/100x100' }
                        ];
                        
                        const nftGrid = document.getElementById('nftGrid');
                        mockNFTs.forEach(nft => {
                            const nftElement = document.createElement('div');
                            nftElement.className = 'nft-item';
                            nftElement.innerHTML = `
                                <img src="${nft.image}" alt="${nft.name}" class="nft-image">
                                <p>${nft.name}</p>
                            `;
                            nftGrid.appendChild(nftElement);
                        });
                    }
                    
                    window.onload = loadUserNFTs;
                </script>
                <div class="container">
                    <h2>🌌 Welcome to Your Hodlverse</h2>
                    <div id="nftGrid" class="nft-grid"></div>
                </div>
            </ts:view>
        </ts:card>
    </ts:cards>
    
    <ts:attribute name="moonVotes">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">Moon Votes</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call function="getMoonVotes" contract="NFTPulseToken" as="uint">
                <ethereum:data>
                    <ethereum:uint256 ref="tokenId"/>
                </ethereum:data>
            </ethereum:call>
        </ts:origins>
    </ts:attribute>
    
    <ts:attribute name="rektVotes">
        <ts:type>
            <ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax>
        </ts:type>
        <ts:label>
            <ts:string xml:lang="en">Rekt Votes</ts:string>
        </ts:label>
        <ts:origins>
            <ethereum:call function="getRektVotes" contract="NFTPulseToken" as="uint">
                <ethereum:data>
                    <ethereum:uint256 ref="tokenId"/>
                </ethereum:data>
            </ethereum:call>
        </ts:origins>
    </ts:attribute>
</ts:token>
